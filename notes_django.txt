D:\work\python_projects\django_projects\src\trydjango

-----Starter steps-----
set up virtual_env
pip install django==2.0.7                     
django-admin startproject trydjango 
python manage.py runserver
python manage.py migrate
python manage.py createsuperuser
python manage.py startapp products

run for saving any changes to dbs
python manage.py makemigrations
python manage.py migrate after you make any changes


-----python django shell- you can create objects in the DB
python manage.py shell
from products import Product
Products.object.all()- shows all of products created
Products.object.create()- just like where you went to admin to create




-----------model_forms django----------
form action will send the form to whatever URL you put there
form method - GET or POST
when you have post- general rule to use tokens
https://stackoverflow.com/questions/2303268/djangos-forms-form-vs-forms-modelform

--------------- In forms, during update operation you can simply fill in the already existing values in the form by passing
the objects as an instance as shown below---------------------------------
def product_update_view(request, id=id):
    obj = get_object_or_404(Product, id=id)
    form = ProductForm(request.POST or None, instance=obj) # here you have passed the obj as instance for showing already exisiting values in the update form
    if form.is_valid():
        form.save()
    context = {
        'form': form
    }
    return render(request, "products/product_create.html", context)


------Pure django_forms forms.Form--------------------
auto_validation- based on what you initialised first in models
secure validation- built in validation
form should match the validation in the models
for eg price = forms.DecimalField() should match in models too

you can set initial data to forms

---form fields--------------------------------
https://docs.djangoproject.com/en/4.0/ref/forms/fields/
--widgets in forms----
https://docs.djangoproject.com/en/4.0/ref/forms/widgets/

-----form validating method--------------------------------
overloading defaults form validation in case of forms.ModelForm



---------Dynamic URL Routing--------------------------------
urlpatterns = [
    path('', product_list_view, name='product-list'),
    path('create/', product_create_view, name='product-list'),
    path('<int:id>/', product_detail_view, name='product-detail'),
    path('<int:id>/update/', product_update_view, name='product-update'), #id id should match in view method as well
    path('<int:id>/delete/', product_delete_view, name='product-delete'),
]
#spicific view of an id ie., product
def product_detail_view(request, id):
    obj = get_object_or_404(Product, id=id)
    context = {
        "object": obj
    }
    return render(request, "products/product_detail.html", context)

#delete object using id
def product_delete_view(request, id):
    obj = get_object_or_404(Product, id=id)
    if request.method == "POST":
        obj.delete()
        return redirect('../../')
    context = {
        "object": obj
    }
    return render(request, "products/product_delete.html", context)
#product list view, queryset is typical name, typical context var name is object_list(to make them reusable)
    def product_list_view(request):
        queryset = Product.objects.all() # list of objects
        context = {
            "object_list": queryset
            }
        return render(request, "products/product_list.html", context)
    in views
    def product_list_view(request):
        queryset = Product.objects.all() # list of objects
        context = {
            "object_list": queryset
        }
        return render(request, "products/product_list.html", context)


get_absolute_url method, used conventionally for getting absolute url in django -- inside models.py
def get_absolute_url(self):
    return f"/products/{self.id}/"

---------- django URL reverse - to no hardcode the urls in other places--------------------------------
from django.urls import reverse
#def get_absolute_url(self):
        return reverse("product-detail", kwargs={"id": self.id})

based of the name in views
path('product/<int:id>/', product_detailed_view, name='product-detail'),

--------------- URL confs ----------------------
move product specified urls inside products(cleaner and less confusion in name)- create a urls.py and in original urls

Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
----------name spacing ----------------------------------------------------------------
    in models
    def get_absolute_url(self):
        return reverse("products:product-detail", kwargs={"id": self.id})

#in products.urls
    app_name = 'products'

urlpatterns = [
    path('<int:id>/', product_detailed_view, name='product-detail'),
    path('', product_list_view, name='product-list'),
    path('create/', product_create_view, name ='create' ),
    path('<int:id>/delete/', product_delete_view, name='product-delete'),
]



------------CLASS BASED VIEWs ----------------------------------------------------------------
https://github.com/codingforentrepreneurs/Try-Django/tree/master/src/blog

https://www.youtube.com/watch?v=F5mRW0jo-U4&t=10932s&ab_channel=freeCodeCamp.org
from 3hrs 15 mins onwards


-----------------CLASS BASED VIEWS VS FUNCTION BASED VIEWS ---------------------------------
https://stackoverflow.com/questions/14788181/class-based-views-vs-function-based-views#:~:text=I%20always%20use%20FBVs%20(Function,pain%20to%20implement%20with%20CBVs.